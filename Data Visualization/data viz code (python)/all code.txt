colors ={"neutral": "gray", "positive": "green", "negative": "red"}
plt.figure(figsize=(10,6))
ax = sns.countplot(data = df, x ="airline", hue = "airline_sentiment", palette=colors)
for p in ax.containers:
    ax.bar_label(p)

--------------------------------------
plt.rcParams["figure.figsize"] = (10,6)
ax = sns.countplot(data =df, x ="negativereason", order=df.negativereason.value_counts().index, )
ax.bar_label(ax.containers[0])
plt.xticks(rotation =90);


-------------------------------------
plt.figure(figsize=(10,6))
ax = sns.countplot(x = "number_project", data = df)
for p in ax.patches:
  _x = p.get_x() + p.get_width() / 2
  _y = p.get_y() + p.get_height() + (p.get_height()*0.01)
  value = '{:}'.format(p.get_height())
  ax.text(_x, _y, value, ha="center") 


---------------------------------------
plt.figure(figsize=(8,8))
explode = [0, 0.1]
plt.pie(df['left'].value_counts(), explode=explode, autopct='%1.1f%%', shadow=True,startangle=140)
plt.legend(labels=['continued','left'])
plt.title('"left" Distribution')
plt.axis('off')

------------------------------------
histogram:
sns.histplot(df.price, bins=50, kde=True)
=
=====
=========
===
=

-------------------------------------
corr_by_price = df.corr()["price"].sort_values()[:-1]
plt.figure(figsize = (20,10))
sns.barplot(x = corr_by_price.index, y = corr_by_price)
plt.xticks(rotation=90)
plt.tight_layout();


--------------------------------------
yellowbrick regression model eval:
from yellowbrick.regressor import PredictionError
from yellowbrick.features import RadViz

visualizer = RadViz(size=(720, 3000))
model = LinearRegression()
visualizer = PredictionError(model)
visualizer.fit(X_train, y_train)  # Fit the training data to the visualizer
visualizer.score(X_test, y_test)  # Evaluate the model on the test data
visualizer.show();

-------------------------------
yellowbrick resudials:
plt.figure(figsize=(12,8))
residuals = y_test-y_pred

sns.scatterplot(x = y_test, y = -residuals) #-residuals
plt.axhline(y = 0, color ="r", linestyle = "--")
plt.ylabel("residuals")
plt.show()

-----------------------------

from mpl_toolkits.mplot3d import Axes3D 
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Gene One'], df['Gene Two'], df['Cancer Present'],c=df['Cancer Present']);

------------------------------

correlation:
----------
df.corr()[TARGET].drop([TARGET, 'Time']).sort_values().plot.bar();

---------------------------------

sns.countplot(x="species", data = df, hue = "sex");

-------------------------------

sns.catplot(x='species', data=df, kind='count',col='sex')

---------------------------


